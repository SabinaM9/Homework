package ru.appline.controller;

import java.util.concurrent.atomic.AtomicInteger;
import java.io.BufferedReader;
import java.util.Map;

import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import ru.appline.logic.PetModel;
import ru.appline.logic.Pet;

@RestController
public class Controller {

	PetModel model = PetModel.getInstance();
	Gson gson = new GsonBuilder().setPrettyPrinting().create();
	
	private static final PetModel petModel = PetModel.getInstance();
	private static final AtomicInteger newId = new AtomicInteger(1);
	
	@PostMapping(value = "/createPet", consumes = "application/json")
	public String createPet (@RequestBody Pet pet) {
		petModel.add(pet, newId.getAndIncrement());
		/*
		StringBuffer jb = new StringBuffer();
		String line;
		
		try {
			BufferedReader reader = request.getReader();
			while ((line = reader.readLine()) !=null) {
				jb.append(line);
			}
		} catch (Exception e) {
			System.out.println("Error");
		}
		
		JsonObject jobj = gson.fromJson(String.valueOf(jb), JsonObject.class);
		
		String name = jobj.get("name").getAsString();
		String surname = jobj.get("surname").getAsString();
		double salary = jobj.get("salary").getAsDouble();
		
		User user = new User(name, surname, salary);
		model.add(counter.getAndIncrement(), user);
		
		PrintWriter pw = response.getWriter();
		pw.print(gson.toJson(model.getFromList()));
		*/
		//PrintWriter pw = response.getWriter();
		
		if (newId.intValue() == 2) {
			return gson.toJson("Поздравляем! Высоздали своего первого питомца по имени" +
								model.getFromList(1));
		} else {
			return gson.toJson("Новый питомец создан успешно!");
		}
	}
	
	@GetMapping(value = "/getAll", produces = "application/json")
	public Map<Integer, Pet> getAll() {
		return petModel.getAll();
	}
	
	/*
	 {
	 	"id": 9
	 }
	 */
	@GetMapping(value = "/getPet", produces = "application/json")
	public Pet getPet(@RequestBody Map<String, Integer> id) {
		return petModel.getFromList(id.get("id"));
	}
}