package ru.appline.controller;

import java.util.concurrent.atomic.AtomicInteger;
import java.io.Serializable;
import java.util.Map;

import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

import ru.appline.logic.PetModel;
import ru.appline.logic.Pet;

@RestController
public class Controller {

	Gson gson = new GsonBuilder().setPrettyPrinting().create();
	
	private static final PetModel petModel = PetModel.getInstance();
	private static final AtomicInteger newId = new AtomicInteger(1);
	
	/*
	{
		"name": "Barsik",
    	"type": "cat",
    	"age": 8
	}
	 */
	@PostMapping(value = "/createPet", consumes = "application/json")
	public String createPet (@RequestBody Pet pet) {
		petModel.add(pet, newId.getAndIncrement());

		int check = newId.get();
		check--;
		if (check == 1) {
			return "Поздравляем! Высоздали своего первого питомца по имени " +
					petModel.getFromList(1).getName().toString();
		} else {
			return "Новый питомец по имени " + 
					petModel.getFromList(check).toString() + 
					" создан успешно!";
		}
	}
	
	@GetMapping(value = "/getAll", produces = "application/json")
	public Map<Integer, Pet> getAll() {
		return petModel.getAll();
	}
	
	/*
	 {
	 	"id": 9
	 }
	 */
	@GetMapping(value = "/getPet", produces = "application/json")
	public Pet getPet(@RequestBody Map<String, Integer> id) {
		return petModel.getFromList(id.get("id"));
	}
	
	@DeleteMapping(value = "/deletePet", produces = "application/json")
	public String deletePet (@RequestBody Map<String, Integer> id) {	
		final String text = new String(petModel.getFromList(id.get("id")).getName().toString());
		petModel.delete(id.get("id"));
		return "Питомец по имени  " + text + " удален :(";	
	}

/*
	 Params: key = id, value = 1
	 {
	 	"name": "Barsik",
	 	"type": "cat",
	 	"age": 3
	 }
*/
	@PutMapping(value = "/changePet", produces = "application/json")
	public String changePet (@RequestParam int id, @RequestBody Pet pet) {
		petModel.put(id, pet);
		return "Питомец номер " + 
				id + 
				" изменен на: " + 
				petModel.getFromList(id).getName().toString();
	}
}